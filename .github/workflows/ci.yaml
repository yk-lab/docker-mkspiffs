name: ci

on:
  schedule:
    - cron: "0 10 * * *"
  push:
    branches:
      - "**"
    tags:
      - "v*.*.*"
  pull_request:
    branches:
      - "main"

env:
  TEST_TAG: mkspiffs:test

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Run hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile

  build-push:
    strategy:
      matrix:
        version:
          - full: 0.2.3
            major: 0
            minor: 2
        target_mcu: [esp8266, esp32]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          # list of Docker images to use as base name for tags
          images: |
            ghcr.io/yk-lab/mkspiffs
          # generate Docker tags based on the following events/attributes
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,enable={{is_default_branch}},value=${{ matrix.target_mcu }}-${{ matrix.version.full }}
            type=raw,enable={{is_default_branch}},value=${{ matrix.target_mcu }}-${{ matrix.version.major }}.${{ matrix.version.minor }}
            type=raw,enable={{is_default_branch}},value=${{ matrix.target_mcu }}-${{ matrix.version.major }}
            type=raw,enable={{is_default_branch}},value=${{ matrix.target_mcu }}-latest
            type=sha

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and export to Docker
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile
          load: true
          tags: ${{ env.TEST_TAG }}
          build-args: |
            TARGET_MCU=${{ matrix.target_mcu }}
            VERSION=${{ matrix.version.full }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Test
        run: |
          docker run --rm ${{ env.TEST_TAG }} mkspiffs --version

      - name: run-dockle
        uses: erzz/dockle-action@v1
        with:
          image: ${{ env.TEST_TAG }}
          exit-code: 1
          failure-threshold: fatal

      - name: Upload Report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: Dockle Report
          path: dockle-report.json

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "${{ env.TEST_TAG }}"
          format: "table"
          exit-code: "1"
          ignore-unfixed: true
          vuln-type: "os,library"
          severity: "CRITICAL,HIGH"

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm/v7,linux/arm64
          build-args: |
            TARGET_MCU=${{ matrix.target_mcu }}
            VERSION=${{ matrix.version.full }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: slack-notification-success
        if: ${{ success() }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_COLOR: good
          SLACK_TITLE: "Success to Docker Test :rocket:"
          SLACK_MESSAGE: ":closed_book: ${{ github.repository }}"

      - name: slack-notification-failure
        if: ${{ failure() }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_COLOR: danger
          SLACK_TITLE: "Failure to Docker Test :boom:"
          SLACK_MESSAGE: ":closed_book: ${{ github.repository }}"
